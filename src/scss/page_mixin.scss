@mixin borderRadius($pos:'',$r:0px) {
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    @if($pos==''){
      #{$prefix}border-radius : $r;
    }
    @else{
      #{$prefix}border-#{$pos}-radius : $r;
    }

  }
}
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacityIE: $opacity * 100;
  filter: alpha(opacity=$opacityIE);
}
/* rotate */
@mixin rotate($degree) {
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}transform: rotate($degree);
  }
}
/* transform-origin */
@mixin transform-origin($y:top,$x:left) {
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}transform-origin: $y $x;
  }
}

/* transform */
@mixin transform( $value) {
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}transform: $value;
  }
}
/* transition */
@mixin transition($args) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  transition: $args;
}
@mixin no-transition() {
  -webkit-transition: none !important;
  -moz-transition: none !important;
  -o-transition: none !important;
  transition: none !important;
}
@mixin transition-delay($delay) {
  -webkit-transition-delay: #{$delay}s;
  -moz-transition-delay: #{$delay}s;
  -o-transition-delay: #{$delay}s;
  transition-delay: #{$delay}s;
}
/* transform-transition */
@mixin transform-transition($time:1,$delay:0,$bezier:'0,0,1,1') { 
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}transition: #{$prefix}transform #{$time}s cubic-bezier(#{$bezier});
    #{$prefix}transition-delay: #{$delay}s;
  }
}
@mixin transform-transition-inout($time:1,$delay:0){
  $bezier: .70, 0, .20, 1;
  @include transform-transition($time,$delay,$bezier);
}
@mixin transform-transition-in($time:1,$delay:0){
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}transition: #{$prefix}transform #{$time}s ease-in;
    #{$prefix}transition-delay: #{$delay}s;
  }
}
@mixin transform-transition-out($time:1,$delay:0){
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}transition: #{$prefix}transform #{$time}s ease-out;
    #{$prefix}transition-delay: #{$delay}s;
  }
}
@mixin css-transition-reset(){
  @include opacity(1); @include transform(translate(0));
}
/* css-transition */
@mixin css-value-transition($value) {
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}transition: #{$value};
  }
}
@mixin css-transition($property:all,$time:1,$delay:0,$bezier:'0,0,1,1') {
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}transition: #{$property} #{$time}s cubic-bezier(#{$bezier});
    #{$prefix}transition-delay: #{$delay}s;
  }
}
@mixin css-transition-linear($property:all,$time:1,$delay:0){
  $bezier: .25, .25, .75, .75;
  @include css-transition($property,$time,$delay,$bezier);
}
@mixin css-transition-inout($property:all,$time:1,$delay:0){
  $bezier: .5, 0, .5, 1;
  @include css-transition($property,$time,$delay,$bezier);
}
@mixin css-transition-in($property:all,$time:1,$delay:0){
  $bezier: .5, 0, 1, .5;
  @include css-transition($property,$time,$delay,$bezier);
}
@mixin css-transition-out($property:all,$time:1,$delay:0){
  $bezier: 0, .5, .5, 1;
  @include css-transition($property,$time,$delay,$bezier );
}

/* transform-css-transition */
@mixin transform-css-transition($value) {
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}transition: #{$prefix}transform #{$value};
  }
}


/* keyframes */
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

/*@include keyframes(scroll-loop) {
  0% { @include  transform(translateY(0)); }
  50% { @include  transform(translateY(0));  }
  100% { @include  transform(translateY(0));  }
}*/

/* line */
@mixin line($width:1px,$height:1px,$color:#000){
  width : $width; border-top:#{$height} solid $color;
}

@mixin lineTop($height:1px,$width:1px,$color:#000){
  width : $width; height : $height;border-left:#{$width} solid $color;
}
@mixin line-diagonal($width:1px,$degree:45deg,$y:top,$x:left,$height:1px,$color:#fff){
  @include line($width,$height,$color);
  @include rotate($degree);
  @include transform-origin($y,$x);
}


$tW : 1080;
@mixin calFontSize( $fontSize ){
    font-size: ($fontSize / $tW) * 100 + vw;
}

@function calWidth( $width ){
    @return ($width / $tW ) * 100 + vw;
}

@function calHeightAsWidth( $height ){
    @return (( $height / $tW ) * 100 ) + vw;
}

@function calCenterAsWidth( $width ){
    @return ((( $width / $tW) * 100 ) / 2 ) + vw;
}

@function calLineHeight( $fontsize, $lineHeight ){
    @return $lineHeight / $fontsize
}



$tW_Low : 640;
@mixin calFontSize_Low( $fontSize ){
  font-size: ($fontSize / $tW_Low) * 100 + vw;
}

@function calWidth_Low( $width ){
  @return ($width / $tW_Low ) * 100 + vw;
}

@function calHeightAsWidth_Low( $height ){
  @return (( $height / $tW_Low ) * 100 ) + vw;
}

@function calCenterAsWidth_Low( $width ){
  @return ((( $width / $tW_Low) * 100 ) / 2 ) + vw;
}

@function calLineHeight_Low( $fontsize, $lineHeight ){
  @return $lineHeight / $fontsize
}
